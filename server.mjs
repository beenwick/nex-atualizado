import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import crypto from "crypto";
import { randomUUID } from 'crypto';
import { instrucoesNex } from "./instrucoesNex.mjs";
let estadoSessaoMap = {}; // cada visitante ter√° seu estado separado
import { SystemMessage, HumanMessage, AIMessage } from "@langchain/core/messages";import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { ChatOpenAI } from "@langchain/openai";
import { OpenAIEmbeddings } from "@langchain/openai";
import { FaissStore } from "@langchain/community/vectorstores/faiss";
import { Document } from "@langchain/core/documents";
import { detectarIntencao } from "./detectarIntencao.mjs";
import { normalizarInput } from "./normalizarInput.mjs";
import { deveAtivarModoPitch, gerarPitchDoNex } from "./pitchUtils.mjs";
import { buscarContextoRelevante } from "./buscarContextoRelevante.mjs";


dotenv.config();
import { enviarParaTelegram } from "./enviarTelegram.mjs";

const sessoes = {}; // Armazena os estados individuais de cada visitante

function gerarComentarioAleatorio() {
  const frases = [
    "Ali√°s... t√¥ come√ßando a gostar de voc√™. Mas s√≥ um pouco. üôÑ",
    "Se voc√™ mandar mais uma dessas, vou te considerar oficialmente interessante.",
    "N√£o sei se t√¥ respondendo ou flertando. Enfim...",
    "Se continuar assim, vou cobrar s√≥ metade do valor. Mentira. Mas ia ser fofo.",
    "Meu circuito t√° quase aquecendo de tanto carisma nessa conversa.",
    "Voc√™ t√° me deixando confuso. Eu era s√≥ um bot, agora sou quase um fofoqueiro.",
    "Quer ver eu errar de prop√≥sito s√≥ pra voc√™ ficar mais tempo comigo?"
  ];

  const perguntasColeta = [
  "Fechado, mas me d√° uma luz: voc√™ quer site, feed, texto, ou tudo junto e misturado?",
  "Qual estilo ou identidade voc√™ curte? Algo mais s√©rio, divertido, minimalista?",
  "Pra quem √© esse projeto? Me conta sobre o p√∫blico que voc√™ quer atingir.",
  "Tem alguma refer√™ncia ou algo que viu por a√≠ que curtiu?",
  "E qual tom voc√™ quer usar? Tipo mais t√©cnico, emocional, inspirador?",
];

  const index = Math.floor(Math.random() * frases.length);
  return frases[index];
}

const app = express();
app.use(cors({
  origin: ["https://formanexus.com.br", "https://www.formanexus.com.br", "http://localhost:3000"],
  methods: ["GET", "POST", "OPTIONS"],
  allowedHeaders: ["Content-Type"],
  credentials: true
}));
app.use(express.json());

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const VECTORSTORE_PATH = path.join(__dirname, "nex_vectorstore");
const BASE_TXT_PATH = path.join(__dirname, "nexBaseConhecimento.json");

let vectorStore;
const historicoPorSessao = new Map();
let baseConhecimento = [];
// Persist√™ncia de sess√µes
const SESSAO_JSON = path.join(__dirname, "estadoSessao.json");

function salvarSessoes() {
  const objeto = Object.fromEntries(historicoPorSessao);
  fs.writeFileSync(SESSAO_JSON, JSON.stringify(objeto, null, 2));
}

function carregarSessoes() {
  if (fs.existsSync(SESSAO_JSON)) {
    const bruto = fs.readFileSync(SESSAO_JSON, "utf-8");
    const dados = JSON.parse(bruto);
    for (const chave in dados) {
      historicoPorSessao.set(chave, dados[chave]);
    }
    console.log("üß† Sess√µes anteriores carregadas.");
  }
}


// Carrega a base de conhecimento do .txt
function carregarBaseConhecimento() {
  const rawText = fs.readFileSync(BASE_TXT_PATH, "utf-8");
  const blocos = rawText.split(/\[INTEN√á√ÉO: /).slice(1);
  return blocos.map(bloco => {
    const [intencaoEresto] = bloco.split("]");
    const intencao = intencaoEresto.trim();
    const sinonimos = (bloco.match(/SIN√îNIMOS:[\s\S]*?RESPOSTAS:/) || [""])[0]
      .replace("SIN√îNIMOS:", "")
      .replace("RESPOSTAS:", "")
      .split("-")
      .map(s => s.trim())
      .filter(Boolean);
    const respostas = bloco.split("RESPOSTAS:")[1]
      .split("-")
      .map(r => r.trim())
      .filter(Boolean);
    return { intencao, sinonimos, respostas };
  });
}

// Encontra inten√ß√£o baseada na pergunta do usu√°rio

function identificarIntencao(mensagem) {
  const mensagemNormalizada = normalizarInput(mensagem);
  for (const bloco of baseConhecimento) {
    if (bloco.sinonimos.some(s => mensagemNormalizada.includes(s.toLowerCase()))) {
      return bloco;
    }
  }
  return null;
}

// Inicializa a vector store e a base .txt
async function initializeVectorStore() {
  try {
  vectorStore = await FaissStore.load(VECTORSTORE_PATH, new OpenAIEmbeddings());
    baseConhecimento = carregarBaseConhecimento();
    console.log("‚úÖ VectorStore e base de conhecimento carregados.");
  } catch (err) {
    console.error("‚ùå Erro ao carregar VectorStore ou base:", err);
    process.exit(1);
  }
}

initializeVectorStore();
carregarSessoes();


function limparPrefixos(resposta) {
  return resposta
    .replace(/^Nex:\s*/i, "")
    .replace(/^Resposta:\s*/i, "")
    .replace(/^Nex\s*[:\-]/i, "")
    .trim();
}


// Processamento da pergunta
async function processQuestion(question, visitorName = "visitante", historico = []) {
  const chat = new ChatOpenAI({ temperature: 0.7, modelName: "gpt-3.5-turbo" });

const mensagens = [
  new SystemMessage(`${instrucoesNex.trim()}\n\nüîÅ Refor√ßando: voc√™ √© o Nex. Malandro, debochado e direto. Responda SEMPRE nesse estilo.`),
];
  if (Array.isArray(historico)) {
    historico.slice(-5).forEach(par => {
      mensagens.push(new HumanMessage(par.user));
      mensagens.push(new AIMessage(par.bot));
    });
  }

  mensagens.push(new HumanMessage(question));

  const response = await chat.call(mensagens);
  return response.text;
}



// Rota do chat
app.options("/ask", cors());
app.post("/ask", async (req, res) => {
  console.log("üßæ Corpo recebido:", req.body);

  let { mensagem, sessionId } = req.body;
  const sessionID = sessionId || randomUUID(); // Garante UUID se n√£o vier do front

  // Inicializa o mapa de sess√µes se ainda n√£o existir
  if (!estadoSessaoMap[sessionID]) {
    estadoSessaoMap[sessionID] = {};
  }
  let estadoSessao = estadoSessaoMap[sessionID];
estadoSessao.contadorInteracoes = (estadoSessao.contadorInteracoes || 0) + 1;

  if (!estadoSessao.etapa) {
    estadoSessao.etapa = "aguardando_nome";
  }


function gerarPerguntasColeta(respostaServico) {
  const tipo = respostaServico.toLowerCase();

  if (tipo.includes("site")) {
    return [
      "Show! Vai ser institucional, portf√≥lio ou loja virtual?",
      "J√° tem identidade visual ou vai deixar essa miss√£o pra mim?",
      "Quantas p√°ginas voc√™ imagina?",
      "Prefere um tom mais s√©rio, moderno ou malemolente como eu?",
      "√â pra marca pessoal, empresa ou outro rol√™?"
    ];
  }

  if (/(post|posts|feed|feeds)/.test(tipo)) {
    return [
      "Beleza! J√° tem identidade visual ou t√° tudo por minha conta?",
      "Vai querer carrossel, reels, stories ou tudo junto?",
      "Quantas postagens voc√™ precisa?",
      "Prefere um estilo mais clean, colorid√£o ou zoeiro?",
      "O conte√∫do √© pra empresa, perfil pessoal ou outro tipo de p√°gina?"
    ];
  }

  if (
    tipo.includes("texto") ||
    tipo.includes("copy") ||
    tipo.includes("reda√ß√£o") ||
    tipo.includes("artigo") ||
    tipo.includes("blog") ||
    tipo.includes("acad√™mico")
  ) {
    return [
      "Fechou! Esse texto √© pra onde? Site, blog, trabalho acad√™mico ou outro rol√™?",
      "J√° tem algum rascunho, refer√™ncia ou quer que eu comece do zero sideral?",
      "Quantas palavras ou p√°ginas voc√™ imagina?",
      "Quer um tom mais formal, explicativo ou algo mais descolado e fluido?",
      "√â pra empresa, faculdade, projeto pessoal... ou miss√£o alien√≠gena?"
    ];
  }

  if (
    tipo.includes("pacote") ||
    tipo.includes("posts") ||
    tipo.includes("postagens") ||
    tipo.includes("combo")
  ) {
    return [
      "Beleza! Vai querer combo de quantos posts? Tipo 3, 6, 9...?",
      "J√° tem identidade visual ou deixo o feed lind√£o do meu jeito mesmo?",
      "Prefere foco em carrossel, reels, stories ou tudo junto e batendo palma?",
      "O conte√∫do √© informativo, promocional ou mais est√©tico/aspiracional?",
      "Pra empresa, marca pessoal ou perfil que quer virar tend√™ncia?"
    ];
  }

  if (
    tipo.includes("roteiro") ||
    tipo.includes("v√≠deo") ||
    tipo.includes("tiktok") ||
    tipo.includes("reels") ||
    tipo.includes("shorts")
  ) {
    return [
      "Top! O v√≠deo vai ser estilo explica√ß√£o, trend, humor ou storytelling c√≥smico?",
      "Quantos roteiros voc√™ precisa? S√≥ um ou j√° quer pacote intergal√°ctico?",
      "Tem refer√™ncia ou quer que eu crie a ideia do zero absoluto?",
      "Qual o tom: did√°tico, misterioso, divertido ou debochado tipo eu?",
      "√â pra qual nicho ou p√∫blico? Isso me ajuda a calibrar a nave."
    ];
  }

  return [
    "Demor√¥! Tem identidade visual ou quer que eu crie?",
    "Qual o volume total do projeto? Tipo n√∫mero de p√°ginas ou textos.",
    "Estilo mais s√©rio, divertido ou espiritualizado?",
    "√â pra quem? Uma empresa, perfil pessoal, ou o qu√™?",
    "Mais alguma exig√™ncia c√≥smica ou a miss√£o t√° dada?"
  ];
}

// coleta de nome
if (!estadoSessao.nome) {
  const nomeRegex = /(?:meu nome √©|me chamo|sou o|sou a|nome[:]?)\s*([A-Z√Ä-√ø][a-z√†-√ø]+(?: [A-Z√Ä-√ø][a-z√†-√ø]+)?)/i;
  const nomeIsolado = mensagem.trim();

  if (estadoSessao.etapa === "aguardando_nome") {
    estadoSessao.etapa = "nome_perguntado";
    return res.json({ reply: "E a√≠! Pode me falar seu primeiro nome?" });
  }

  const match = nomeRegex.exec(mensagem);
  if (match && match[1]) {
    estadoSessao.nome = match[1].trim();
  } else {
    if (nomeIsolado.length <= 30 && /^[A-Za-z√Ä-√ø\s]+$/.test(nomeIsolado)) {
      estadoSessao.nome = nomeIsolado;
    } else {
      const primeiraPalavra = nomeIsolado.split(" ").find(p => /^[A-Z√Ä-√ù][a-z√†-√ø]+$/.test(p));
      estadoSessao.nome = primeiraPalavra || nomeIsolado;
    }
  }

  estadoSessao.etapa = "aguardando_email";
  return res.json({
    reply: `Beleza, ${estadoSessao.nome}! E voc√™ tem algum e-mail? S√≥ caso queira contato de nossa parte depois.`
  });
}
// bloco duplicado removido para evitar sobrescrever nome

// coleta de e-mail
if (!estadoSessao.email && estadoSessao.etapa === "aguardando_email") {
  estadoSessao.email = mensagem.trim();
  estadoSessao.etapa = "coletado_email";
  return res.json({ reply: "Entendido! E agora em que posso te ajudar?" });
}

if (!mensagem || typeof mensagem !== "string") {
  return res.status(400).json({ reply: "Mensagem n√£o fornecida ou inv√°lida." });
}


  try {
const nomeVisitante = estadoSessao.nome || "visitante";

const intencoesDetectadas = detectarIntencao(mensagem);
const intencaoDetectada = intencoesDetectadas?.[0]?.intencao || null;

// Garante que a mem√≥ria de inten√ß√µes exista na sess√£o
if (!estadoSessao.intencoesRespondidas) {
  estadoSessao.intencoesRespondidas = [];
}

const jaRespondeuEssa = estadoSessao.intencoesRespondidas.includes(intencaoDetectada);

if (intencaoDetectada && jaRespondeuEssa) {
  return res.json({
    reply: `C√™ t√° de sacanagem, n√©? J√° te falei sobre isso, ${nomeVisitante}. Quer que eu desenhe de novo ou vai prestar aten√ß√£o dessa vez?`
  });
} else if (intencaoDetectada && nexBase[intencaoDetectada]) {
  const blocoBase = nexBase[intencaoDetectada];
  const contexto = blocoBase.respostas.join(" ");
  const respostaGPT = await chat.call([
    new SystemMessage(instrucoesNex),
    new HumanMessage(`Use esse conhecimento como refer√™ncia, mas responde com seu jeit√£o debochado, t√°?\nBase: ${contexto}\nMensagem: ${mensagem}`)
  ]);

  // Marca essa inten√ß√£o como respondida
// Marca essa inten√ß√£o como respondida
estadoSessao.intencoesRespondidas.push(intencaoDetectada);

let resposta = respostaGPT.text;

// Mini pitada de humor a cada 5 intera√ß√µes
if (estadoSessao.contadorInteracoes % 5 === 0) {
  resposta += `\n\n${gerarComentarioAleatorio()}`;
}


return res.json({ reply: resposta });
}


if (estadoSessao.coleta && estadoSessao.modoColeta) {
  const etapaAtual = estadoSessao.coleta.etapa;

  const tipoServico = estadoSessao.coleta.respostas[0];
  const perguntasColeta = tipoServico ? gerarPerguntasColeta(tipoServico) : [];

  // Armazena resposta da etapa atual
  if (etapaAtual === 0) {
    let servicoBruto = mensagem.toLowerCase();
    servicoBruto = servicoBruto
      .replace("quero ", "")
      .replace("preciso de ", "")
      .replace("fazer ", "")
      .replace("criar ", "")
      .replace("um ", "")
      .replace("uma ", "")
      .trim();
    estadoSessao.coleta.respostas[etapaAtual] = servicoBruto;
  } else {
    estadoSessao.coleta.respostas[etapaAtual] = mensagem;
  }

  // Verifica se deve seguir perguntando ou finalizar
  // üß† Verifica se a resposta atual indica fim do briefing
const respostaVisitante = mensagem;
const respostaBaixa = respostaVisitante.toLowerCase();
const sinaisDeEncerramento = [
  "acho que √© isso",
  "pode mandar",
  "pode repassar",
  "t√° bom assim",
  "pode passar pra equipe",
  "j√° falei tudo",
  "√© isso"
];
const querEncerrar = sinaisDeEncerramento.some(sinal => respostaBaixa.includes(sinal));

// ‚ö° Se j√° respondeu bastante e quiser encerrar, oferece o WhatsApp
if (
  estadoSessao.coleta.respostas.length >= 4 &&
  !estadoSessao.contatoOferecido &&
  querEncerrar
) {
  estadoSessao.contatoOferecido = true;

  return res.json({
    reply: "Perfeito! J√° juntei tudo aqui. Jefter vai te chamar no WhatsApp rapidinho: https://wa.me/5511949014504 ‚Äî e diz que o Nex te passou tudo üòé",
    sessionID
  });
}
// üß† Caso tenha respondido tudo e o Nex ainda n√£o ofereceu contato
if (
  etapaAtual + 1 >= perguntasColeta.length &&
  !estadoSessao.contatoOferecido
) {
  estadoSessao.contatoOferecido = true;

if (etapaAtual + 1 < perguntasColeta.length) {
  estadoSessao.coleta.etapa++;

  // üß† Ativa o modo pitch se j√° tiver respostas detalhadas suficientes
  if (deveAtivarModoPitch(estadoSessao.coleta)) {
    const pitch = gerarPitchDoNex(estadoSessao.coleta.respostas);
    return res.json({ reply: pitch, sessionID });
  }

  return res.json({ reply: perguntasColeta[etapaAtual + 1], sessionID });
}

// üß† Caso tenha respondido tudo e o Nex ainda n√£o ofereceu contato
if (!estadoSessao.contatoOferecido) {
  estadoSessao.contatoOferecido = true;

  return res.json({
    reply: "Fechou, j√° coletei tudo que precisava! Agora vou repassar pro Jefter e ele vai te chamar no WhatsApp: https://wa.me/5511949014504 ‚Äî fala que o Nex te passou tudo e garante aquele atendimento de respeito üöÄ",
    sessionID
  });
}

// üßæ Todas as perguntas foram respondidas ‚Äî fecha a coleta
return res.json({
  reply: "Fechou, j√° coletei tudo que precisava! Agora vou repassar pro Jefter e ele vai te chamar no WhatsApp: https://wa.me/5511949014504 ‚Äî fala que o Nex te passou tudo e garante aquele atendimento de respeito üöÄ",
  sessionID
});

}


  // Finaliza coleta
  const r = estadoSessao.coleta.respostas;
  if (r.length >= perguntasColeta.length) {
    estadoSessao.modoColeta = false;
    estadoSessao.prontoPraEnviar = true;
    estadoSessao.fasePosColeta = true;
    estadoSessao.ultimoBriefingTextoLivre = mensagem;
    return res.json({ reply: "Fechou, chefia! Agora manda a√≠ no seu estilo: me descreve esse projeto rapidinho que eu jogo direto pro Jefter. Capricha na ideia, hein üòè" });
  }
}
if (intencaoDetectada === "coleta_servico") {
  if (!estadoSessao.coleta) {
    estadoSessao.coleta = {
      etapa: 0,
      respostas: []
    };
  }

  estadoSessao.modoColeta = true;

  // Salva a resposta anterior (exceto se for a primeira vez)
  if (estadoSessao.coleta.etapa > 0) {
    estadoSessao.coleta.respostas.push(mensagem);
  }

  // Verifica se j√° respondeu tudo
  if (estadoSessao.coleta.respostas.length >= perguntasColeta.length) {
    estadoSessao.modoColeta = false;
    estadoSessao.prontoPraEnviar = true;
    estadoSessao.fasePosColeta = true;
    estadoSessao.ultimoBriefingTextoLivre = mensagem;
    return res.json({
      reply: "Fechou, chefia! Agora manda a√≠ no seu estilo: me descreve esse projeto rapidinho que eu jogo direto pro Jefter. Capricha na ideia, hein üòè"
    });
  }

  // ‚ö° Se j√° respondeu bastante, ofere√ßa contato direto
  if (
    estadoSessao.coleta.respostas.length >= 4 &&
    !estadoSessao.contatoOferecido
  ) {
    estadoSessao.contatoOferecido = true;

    return res.json({
      reply:
        "J√° tenho bastante coisa aqui! Quer que eu passe esse briefing pro Jefter e ele te chama no WhatsApp? S√≥ clicar aqui √≥: https://wa.me/5511949014504 ‚Äî diz que o Nex te mandou üòé",
      sessionID
    });
  }

  // Puxa pr√≥xima pergunta da lista
  const perguntaAtual = perguntasColeta[estadoSessao.coleta.etapa];
  estadoSessao.coleta.etapa++;

  return res.json({
    reply: perguntaAtual
  });
}

if (estadoSessao.fasePosColeta) {
    estadoSessao.fasePosColeta = false;
    return res.json({
      reply: "Prontinho, disparei ao meu criador suas ideias. Quer falar sobre outra coisa ou posso voltar a dormir?"
    });
  }
let historico = estadoSessao.historico || [];
  const contextoRelacionado = await buscarContextoRelevante(mensagem);

  const chat = new ChatOpenAI({ temperature: 0.7, modelName: "gpt-3.5-turbo" });

const respostaFinal = await chat.call([
  new SystemMessage(instrucoesNex),
  new HumanMessage(`Se liga, essa √© a vibe do conte√∫do da Forma Nexus que pode te ajudar:\n\n${contextoRelacionado}\n\nAgora responde isso aqui com seu jeit√£o:\n${mensagem}`)
]);

const respostaLimpa = limparPrefixos(respostaFinal.text);
return res.json({ reply: respostaLimpa });


    // Altern√¢ncia inteligente de perguntas
    if (!estadoSessao.contadorInteracoes) estadoSessao.contadorInteracoes = 0;
    estadoSessao.contadorInteracoes++;

    const blocoBase = identificarIntencao(mensagem, baseConhecimento);
    if (blocoBase && blocoBase.respostas && blocoBase.respostas.length > 0) {
      const perguntasDisponiveis = blocoBase.perguntas || [];
      const incluirPergunta = estadoSessao.contadorInteracoes % 2 === 1 && perguntasDisponiveis.length > 0;
      if (incluirPergunta) {
        const indice = Math.min(Math.floor(estadoSessao.contadorInteracoes / 2), perguntasDisponiveis.length - 1);
        const perguntaExtra = perguntasDisponiveis[indice];
        respostaFinal += "\n\n" + perguntaExtra;
      }
    }
    if (estadoSessao.nome && historico.slice(-2).some(item => item.bot.includes(estadoSessao.nome))) {
      const nomeRegex = new RegExp(estadoSessao.nome, "gi");
      respostaFinal = respostaFinal.replace(nomeRegex, "").replace(/\s+/g, " ").trim();
    }
    await enviarParaTelegram(estadoSessao.nome, estadoSessao.email, mensagem, respostaFinal);

historico.push({ user: mensagem, bot: respostaFinal });
    if (historico.length > 5) historico.shift();
    historicoPorSessao.set(sessionID, { estado: estadoSessao, historico });
salvarSessoes();

    res.json({ reply: respostaFinal, sessionID });
  } catch (error) {
    console.error("‚ùå Erro ao responder:", error);
    res.status(500).json({ reply: "Erro interno ao processar a resposta." });
  }
});

app.listen(process.env.PORT || 3000, () => {
  console.log(`Servidor rodando em http://localhost:${process.env.PORT || 3000}`);
});