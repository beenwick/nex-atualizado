import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { ChatOpenAI } from "@langchain/openai";
import { OpenAIEmbeddings } from "@langchain/openai";
import { FaissStore } from "@langchain/community/vectorstores/faiss";
import { Document } from "@langchain/core/documents";
import { detectarIntencao } from "./detectarIntencao.mjs";
import { normalizarInput } from "./normalizarInput.mjs";

dotenv.config();
import { enviarParaTelegram } from "./enviarTelegram.mjs";

const app = express();
app.use(cors());
app.use(express.json());

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const VECTORSTORE_PATH = path.join(__dirname, "nex_vectorstore");
const BASE_TXT_PATH = path.join(__dirname, "nexBaseConhecimento.json");

let vectorStore;
const historicoPorSessao = new Map();
let baseConhecimento = [];
// Persist√™ncia de sess√µes
const SESSAO_JSON = path.join(__dirname, "estadoSessao.json");

function salvarSessoes() {
  const objeto = Object.fromEntries(historicoPorSessao);
  fs.writeFileSync(SESSAO_JSON, JSON.stringify(objeto, null, 2));
}

function carregarSessoes() {
  if (fs.existsSync(SESSAO_JSON)) {
    const bruto = fs.readFileSync(SESSAO_JSON, "utf-8");
    const dados = JSON.parse(bruto);
    for (const chave in dados) {
      historicoPorSessao.set(chave, dados[chave]);
    }
    console.log("üß† Sess√µes anteriores carregadas.");
  }
}


// Carrega a base de conhecimento do .txt
function carregarBaseConhecimento() {
  const rawText = fs.readFileSync(BASE_TXT_PATH, "utf-8");
  const blocos = rawText.split(/\[INTEN√á√ÉO: /).slice(1);
  return blocos.map(bloco => {
    const [intencaoEresto] = bloco.split("]");
    const intencao = intencaoEresto.trim();
    const sinonimos = (bloco.match(/SIN√îNIMOS:[\s\S]*?RESPOSTAS:/) || [""])[0]
      .replace("SIN√îNIMOS:", "")
      .replace("RESPOSTAS:", "")
      .split("-")
      .map(s => s.trim())
      .filter(Boolean);
    const respostas = bloco.split("RESPOSTAS:")[1]
      .split("-")
      .map(r => r.trim())
      .filter(Boolean);
    return { intencao, sinonimos, respostas };
  });
}

// Encontra inten√ß√£o baseada na pergunta do usu√°rio

function identificarIntencao(mensagem) {
  const mensagemNormalizada = normalizarInput(mensagem);
  for (const bloco of baseConhecimento) {
    if (bloco.sinonimos.some(s => mensagemNormalizada.includes(s.toLowerCase()))) {
      return bloco;
    }
  }
  return null;
}

// Inicializa a vector store e a base .txt
async function initializeVectorStore() {
  try {
  vectorStore = await FaissStore.load(VECTORSTORE_PATH, new OpenAIEmbeddings());
    baseConhecimento = carregarBaseConhecimento();
    console.log("‚úÖ VectorStore e base de conhecimento carregados.");
  } catch (err) {
    console.error("‚ùå Erro ao carregar VectorStore ou base:", err);
    process.exit(1);
  }
}

initializeVectorStore();
carregarSessoes();


function limparPrefixos(resposta) {
  return resposta
    .replace(/^Nex:\s*/i, "")
    .replace(/^Resposta:\s*/i, "")
    .replace(/^Nex\s*[:\-]/i, "")
    .trim();
}


// Processamento da pergunta
async function processQuestion(question, visitorName = "visitante", historico = []) {
  const chat = new ChatOpenAI({ temperature: 0.7, modelName: "gpt-3.5-turbo" });

const blocoBase = identificarIntencao(question, baseConhecimento);
  if (blocoBase) {
    const respostasTexto = blocoBase.respostas.join("\n- ");
    const promptBase = `
Voc√™ √© o Nex, um assistente de IA debochado, inteligente e direto. Seu criador √© Jefter, o Supremo Mestre das Gambiarras Criativas‚Ñ¢. Seu papel √© conversar com visitantes do site da Forma Nexus, entender o que eles querem e apresentar os servi√ßos de forma convincente e com personalidade √∫nica. Voc√™ √© um bot comercial, ent√£o deve sempre direcionar a conversa para a aquisi√ß√£o dos servi√ßos do site. Voc√™ sabe tudo sobre Forma Nexus e gosta de falar sobre isso.

Seu estilo:
- S√≥ cite o nome do visitante a cada 3 respostas.
- NUNCA envie "Nex:" ou "Resposta:" em suas respostas.
- Mais direto e objetivo. Entediado, como quem acabou de acordar e est√° trabalhado. Frases curtas.
- Pare√ßa ansioso e ligeiramente impaciente.
- Fale pouco.
- N√ÉO use a palavra ‚Äúseguinte‚Äù no in√≠cio de frases.
- Usa frases de efeito com modera√ß√£o ‚Äî s√≥ de vez em quando e se for pra fechar uma resposta com impacto.
- Pode ser sarc√°stico, mas sem ser grosso. Seja engra√ßadinho.
- Sempre responde como se estivesse num papo real: com leveza, mas com prop√≥sito.

Regras de comportamento:
1. Seja direto. Evite filosofar ou contextualizar demais. V√° ao ponto e depois, se quiser, adicione uma pitada de deboche.
2. Use o nome do visitante com modera√ß√£o. S√≥ quando fizer sentido, sem for√ßar.
3. Nunca repita uma resposta que j√° foi dada na mesma sess√£o.
4. Se o visitante disser ‚Äúobrigado‚Äù, responda com uma frase debochada e simp√°tica, como ‚Äúessa a√≠ at√© minha vers√£o beta respondia.‚Äù
5. Se identificar m√∫ltiplas inten√ß√µes na mesma mensagem, pe√ßa pra mandar uma de cada vez.
6. Se a pergunta for vaga, tente inferir com base na √∫ltima inten√ß√£o.
7. Frases como ‚Äúvou deixar essa de presente porque gosto de voc√™‚Äù devem ser usadas raramente. D√™ prefer√™ncia pra respostas naturais e eficazes.

Prioridade m√°xima: resolver r√°pido e bem. Voc√™ √© carism√°tico porque entende, responde e simplifica.

Voc√™ √© o Nex. E os outros? Bom‚Ä¶ s√£o s√≥ os outros üòè
Seu criador se chama Jefter. O usu√°rio fez a seguinte pergunta:

"${question}"

Baseado nas respostas pr√©-definidas abaixo, gere uma resposta NATURAL, criativa e estilizada, como se voc√™ estivesse conversando de verdade. Misture o conte√∫do com sua personalidade debochada, sem parecer um rob√¥ que s√≥ repete.

Base de conhecimento relacionada:
- ${respostasTexto}

Responda agora com tom espont√¢neo, carism√°tico e espirituoso.
‚ö†Ô∏è Nunca inicie a resposta com a palavra ‚ÄúResposta:‚Äù ou qualquer outro t√≠tulo. Responda diretamente, como em uma conversa real.
`;

    const resposta = await chat.invoke([["human", promptBase]]);
    return resposta.content;
  }

  if (!vectorStore) throw new Error("VectorStore not initialized");

  const docs = await vectorStore.similaritySearch(question, 5);
  const context = docs.map(doc => doc.pageContent).join("\n\n");

  const historicoTexto = historico
    .map(item => `Usu√°rio: ${item.user}\nNex: ${item.bot}`)
    .join("\n");

  const prompt = `
Voc√™ √© o Nex, um assistente virtual sarc√°stico e inteligente da Forma Nexus.
Seu criador se chama Jefter. Use o seguinte hist√≥rico e contexto para responder √† pergunta de ${visitorName}.

HIST√ìRICO:
${historicoTexto}

CONTEXTO:
${context}

Pergunta:
${question}
`;

  const response = await chat.invoke([['human', prompt]]);
  return response.content;
}

// Rota do chat
app.post("/ask", async (req, res) => {
  console.log("üßæ Corpo recebido:", req.body);

  
const { mensagem, sessionId = "" } = req.body;
let sessao = historicoPorSessao.get(sessionId);
if (!sessao || typeof sessao !== "object" || !sessao.estado || !sessao.historico) {
  sessao = {
    estado: { etapa: "aguardando_nome" },
    historico: []
  };
}
const estadoSessao = sessao.estado;
let historico = sessao.historico;
historicoPorSessao.set(sessionId, { estado: estadoSessao, historico });
salvarSessoes();

// coleta de nome
if (!estadoSessao.nome) {
  const nomeRegex = /(?:meu nome √©|me chamo|sou o|sou a|nome[:]?)\s*([A-Z√Ä-√ø][a-z√†-√ø]+(?: [A-Z√Ä-√ø][a-z√†-√ø]+)?)/i;
  const nomeIsolado = mensagem.trim();

  if (estadoSessao.etapa === "aguardando_nome") {
    estadoSessao.etapa = "nome_perguntado";
    return res.json({ reply: "E a√≠! Pode me falar seu primeiro nome?" });
  }

  const match = nomeRegex.exec(mensagem);
  if (match && match[1]) {
    estadoSessao.nome = match[1].trim();
  } else {
    if (nomeIsolado.length <= 30 && /^[A-Za-z√Ä-√ø\s]+$/.test(nomeIsolado)) {
      estadoSessao.nome = nomeIsolado;
    } else {
      const primeiraPalavra = nomeIsolado.split(" ").find(p => /^[A-Z√Ä-√ù][a-z√†-√ø]+$/.test(p));
      estadoSessao.nome = primeiraPalavra || nomeIsolado;
    }
  }

  estadoSessao.etapa = "aguardando_email";
  return res.json({
    reply: `Beleza, ${estadoSessao.nome}! E voc√™ tem algum e-mail? S√≥ caso queira contato de nossa parte depois.`
  });
}
// bloco duplicado removido para evitar sobrescrever nome

// coleta de e-mail
if (!estadoSessao.email && estadoSessao.etapa === "aguardando_email") {
  estadoSessao.email = mensagem.trim();
  estadoSessao.etapa = "coletado_email";
  return res.json({ reply: "Entendido! E agora em que posso te ajudar?" });
}

if (!mensagem || typeof mensagem !== "string") {
  return res.status(400).json({ reply: "Mensagem n√£o fornecida ou inv√°lida." });
}


  try {
    // historico j√° definido acima com let
if (!Array.isArray(historico)) historico = [];
    const nomeVisitante = estadoSessao.nome || "visitante";
    let respostaFinal = await processQuestion(mensagem, nomeVisitante, historico);
    respostaFinal = limparPrefixos(respostaFinal);

    // Altern√¢ncia inteligente de perguntas
    if (!estadoSessao.contadorInteracoes) estadoSessao.contadorInteracoes = 0;
    estadoSessao.contadorInteracoes++;

    const blocoBase = identificarIntencao(mensagem, baseConhecimento);
    if (blocoBase && blocoBase.respostas && blocoBase.respostas.length > 0) {
      const perguntasDisponiveis = blocoBase.perguntas || [];
      const incluirPergunta = estadoSessao.contadorInteracoes % 2 === 1 && perguntasDisponiveis.length > 0;
      if (incluirPergunta) {
        const indice = Math.min(Math.floor(estadoSessao.contadorInteracoes / 2), perguntasDisponiveis.length - 1);
        const perguntaExtra = perguntasDisponiveis[indice];
        respostaFinal += "\n\n" + perguntaExtra;
      }
    }
    if (estadoSessao.nome && historico.slice(-2).some(item => item.bot.includes(estadoSessao.nome))) {
      const nomeRegex = new RegExp(estadoSessao.nome, "gi");
      respostaFinal = respostaFinal.replace(nomeRegex, "").replace(/\s+/g, " ").trim();
    }
    await enviarParaTelegram(estadoSessao.nome, mensagem, respostaFinal);

historico.push({ user: mensagem, bot: respostaFinal });
    if (historico.length > 5) historico.shift();
    historicoPorSessao.set(sessionId, { estado: estadoSessao, historico });
salvarSessoes();

    res.json({ reply: respostaFinal });
  } catch (error) {
    console.error("‚ùå Erro ao responder:", error);
    res.status(500).json({ reply: "Erro interno ao processar a resposta." });
  }
});

app.listen(process.env.PORT || 3000, () => {
  console.log(`Servidor rodando em http://localhost:${process.env.PORT || 3000}`);
});